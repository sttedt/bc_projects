// storage, memory, stack
/*
    - storage : 컨트렉트의 상태를 정의, sendTtansaction으로 통해 상태 변경가능
    - memory  : 함수 호출시 내부에만 존재하는 임시변수, storage보다 저렵,
                컨트렉트 레벨에서 사용불가.
    - stack   : 개수가 제한적인 비용이 거의 들지 않는 영역
=================================================================================
    - storage : 구조체, 배열, 매핑등 선언하기 좋다. 상태변수
    - memory  : 함수 인사, 함수 리턴값
    - stack   : 언급되지 않는 케이스는 스택에 저장
*/


// 1. 상태변수 구성 : 자료구조 세팅
// 1-1. 후보자 리스트를 담는 자료구조
// 키 : 후보자번호 혹은 인덱스 값 : 후보자명
// 1-2. 후보자 정보를 담는 자료구조
// 후보자별 득표수를 값, 키 : 후보자명(단, 중복경우는 배제, 향후 대체가 필요)
// 1-3. 투표자는 계좌별 1개, 1회만 투표가능(투표했는가? 안했는가?)
// 1-4. 전체 투표수
// 1-5. 전체 후보자수 => 후보자의 등록번호로도 같이 사용가능(선착순)
// 1-6. event : 이미 투표를 하였습니다. 라는 메시지 전송(중복투표 체크용)

// 2. 기능을 분석하여 함수 목록을 세팅
// 2-1. 후보자 등록 
// 2-2. 투표 : 이름으로 투표하는데, 번호 투표도 고려
// 2-3. 중복 투표 체크
// 2-4. 후보자 수 리턴
// 2-5. 후보자별 득표수
// 2-6. 번호를 넣으면 후보자의 이름을 획득 


// 기존에 추가된 후보자가 존재하는가? 있다면 불가
// 없다면 => 추가, 후보자 수 증가, 득표수는 0
// 추가
// 후보자 수 증가
// 득표수는 0

















